# -*- coding: utf-8 -*-
"""rs_v2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jyRAnTzf3D5F5G-dsSSN727yP4NWurjp
"""

import pandas as pd
import numpy as np
import sys
from itertools import combinations, groupby
from collections import Counter
from IPython.display import display

data = pd.read_csv('order_products__prior.csv')

orders = data.set_index('order_id')['product_id'].rename('item_id')

print(orders.shape)
display(orders.head(10))
type(orders)

# return item pairs.
def get_item_pairs(order_item):
    order_item = order_item.reset_index().as_matrix()
    for order_id, order_object in groupby(order_item, lambda x: x[0]):
        item_list = [item[1] for item in order_object]
              
        for item_pair in combinations(item_list, 2):
            yield item_pair
# return frequency of items          
def freq(iterable):
    if type(iterable) == pd.core.series.Series:
        return iterable.value_counts().rename("freq")
    else: 
        return pd.Series(Counter(iterable)).rename("freq")
      
# Returns number of unique orders
def order_count(order_item):
    return len(set(order_item.index))

# find the frequency of each item
item_freq = freq(orders).to_frame()
type(item_freq)
print(item_freq.shape)
item_freq.head()

# find number of unique orders
unique_orders = order_count(orders)
# calculate the support value for each item.
item_freq['support'] = (item_freq['freq']/unique_orders)*100
print(item_freq.shape)
item_freq.head()

support_t = 0.01 #(0.01%)
#filter items which have support more than the threashold value.
quali_items= item_freq[item_freq['support']>=support_t].index
print(item_freq.shape)
item_freq.head()
item_freq.support.describe()
orders = orders[orders.isin(quali_items)]
print(orders.shape)
#print(quali_items)

# find orders with less than 2 items.
order_size = freq(orders.index).to_frame()
print(order_size.head())
print(order_size.shape)
quali_orders = order_size[order_size.freq>=2].index
orders = orders[orders.index.isin(quali_orders)]
print(orders.shape)
print(orders.head())

# find item_pair usinf orders
items = Counter(get_item_pairs(orders))



# find support anc create dataframe for this.
item_a = []
item_b = []
freq_c = []
support = []

for i in items:
  item_a.append(i[0])
  item_b.append(i[1])
  freq_c.append(items[i])
  support.append((items[i]/len(quali_orders))*100)

result = pd.DataFrame(columns=['item_a','item_b','freq','support'])
result['item_a'] = item_a
result['item_b'] = item_b
result['freq'] = freq_c
result['support'] = support

print(result.shape)
result.head()

# filter the result based on the support threashold
result = result[result.support>=support_t]
print(result.shape)
print(result.head())

# measure confidence score.
result['confidence_a->b'] = np.array(result['support'])/np.array(item_freq.loc[result['item_a'],'support'])
result['confidence_b->a'] = np.array(result['support'])/np.array(item_freq.loc[result['item_b'],'support'])

result.head()

# measure lift score
result['lift'] = np.array(result['support'])/(np.array(item_freq.loc[result['item_a'],'support'])*np.array(item_freq.loc[result['item_b'],'support']))

result.head()

# sort result based on lift value
result = result.sort_values('lift', ascending=False)
print(result.head())
print(result.shape)

# import product data to get product name
product_names = pd.read_csv('products.csv')
product_names.head()

# filter products using qualified orders 
product_name=product_names[product_names['product_id'].isin(quali_items)]

# make copy to convert item_id into item_name
final_result = result.copy()
final_result['item_a'] = pd.Series(result['item_a']).replace(list(product_names['product_id']),list(product_names['product_name']))
final_result['item_b'] = pd.Series(result['item_b']).replace(list(product_names['product_id']),list(product_names['product_name']))
final_result.head()

# function to recommend using item_id
def get_recommendation_by_id(item):
  selected_item_a = result[result['item_a'] == item]
  selected_item_b = result[result['item_b'] == item]
  if selected_item_a.shape[0] == 0 and selected_item_b.shape[0] == 0:
    return {'message':'There is no recoomendation for this item'}
  elif selected_item_a.shape[0] != 0 and selected_item_b.shape[0] != 0:
    #items = list(selected_item_a['item_b'])+list(selected_item_b['item_a'])
    selected_item_a = selected_item_a.loc[:,['item_b','support','confidence_a->b','lift']].rename(columns={'item_b':'item_id','confidence_a->b':'confidence'})
    selected_item_b = selected_item_b.loc[:,['item_a','support','confidence_b->a','lift']].rename(columns={'item_a':'item_id','confidence_b->a':'confidence'})
    final = pd.concat([selected_item_a,selected_item_b],axis=0)
    return final
  if selected_item_a.shape[0] != 0:
    return selected_item_a.loc[:,['item_b','support','confidence_a->b','lift']].rename(columns={'item_b':'item_id','confidence_a->b':'confidence'})
  if selected_item_b.shape[0] != 0:
    return selected_item_b.loc[:,['item_a','support','confidence_b->a','lift']].rename(columns={'item_a':'item_id','confidence_b->a':'confidence'})

get_recommendation_by_id(21903)

product_names[product_names['product_id'] == 21903]

# function to recommend using item_name
def get_recommendation_by_name(item):
  selected_item_a = final_result[final_result['item_a'] == item]
  selected_item_b = final_result[final_result['item_b'] == item]
  if selected_item_a.shape[0] == 0 and selected_item_b.shape[0] == 0:
    return {'message':'There is no recoomendation for this item'}
  elif selected_item_a.shape[0] != 0 and selected_item_b.shape[0] != 0:
    #items = list(selected_item_a['item_b'])+list(selected_item_b['item_a'])
    selected_item_a = selected_item_a.loc[:,['item_b','support','confidence_a->b','lift']].rename(columns={'item_b':'item_name','confidence_a->b':'confidence'})
    selected_item_b = selected_item_b.loc[:,['item_a','support','confidence_b->a','lift']].rename(columns={'item_a':'item_name','confidence_b->a':'confidence'})
    final = pd.concat([selected_item_a,selected_item_b],axis=0)
    return final
  if selected_item_a.shape[0] != 0:
    return selected_item_a.loc[:,['item_b','support','confidence_a->b','lift']].rename(columns={'item_b':'item_name','confidence_a->b':'confidence'})
  if selected_item_b.shape[0] != 0:
    return selected_item_b.loc[:,['item_a','support','confidence_b->a','lift']].rename(columns={'item_a':'item_name','confidence_b->a':'confidence'})

name = 'Organic Baby Spinach'
get_recommendation_by_name(name)


'''
#item_a = []
#item_b = []
#freq_c = []
#support = []
c = 0
result_item = pd.DataFrame(columns=['item_a','item_b','freq'])
for i in items:
  if result_item[(result_item['item_a']==i[1])&(result_item['item_b']==i[0])].shape[0] == 0:
    result_item.loc[c,'item_a'] = i[0]
    result_item.loc[c,'item_b'] = i[1]
    result_item.loc[c,'freq'] = items[i]
    c=c+1
  else:
    result_item[(result_item['item_a']==i[1])&(result_item['item_b']==i[0])]['freq'] = result_item[(result_item['item_a']==i[1])&(result_item['item_b']==i[0])]['freq'] + items[i]
  
print(result_item.shape)
result_item.head()
'''
#result_item['item_a'] = item_a
#result_item['item_b'] = item_b
#result_item['freq'] = freq_c
#support.append((items[i]/len(quali_orders))*100)
#result['support'] = support



